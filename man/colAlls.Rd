% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colAlls.R, R/colAnys.R, R/rowAlls.R,
%   R/rowAnys.R
\name{colAlls,DelayedMatrix-method}
\alias{colAlls,DelayedMatrix-method}
\alias{colAnys,DelayedMatrix-method}
\alias{rowAlls,DelayedMatrix-method}
\alias{rowAnys,DelayedMatrix-method}
\title{Checks if a value exists / does not exist in each row (column) of a matrix}
\usage{
\S4method{colAlls}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  value = TRUE,
  na.rm = FALSE,
  dim. = dim(x),
  force_block_processing = FALSE,
  ...
)

\S4method{colAnys}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  value = TRUE,
  na.rm = FALSE,
  dim. = dim(x),
  force_block_processing = FALSE,
  ...
)

\S4method{rowAlls}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  value = TRUE,
  na.rm = FALSE,
  dim. = dim(x),
  force_block_processing = FALSE,
  ...
)

\S4method{rowAnys}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  value = TRUE,
  na.rm = FALSE,
  dim. = dim(x),
  force_block_processing = FALSE,
  ...
)
}
\arguments{
\item{x}{A NxK \linkS4class{DelayedMatrix}.}

\item{rows}{A \code{\link[base]{vector}} indicating subset of
elements (or rows and/or columns) to operate over. If
\code{\link[base]{NULL}}, no subsetting is done.}

\item{cols}{A \code{\link[base]{vector}} indicating subset of
elements (or rows and/or columns) to operate over. If
\code{\link[base]{NULL}}, no subsetting is done.}

\item{value}{A value to search for.}

\item{na.rm}{If \code{\link[base:logical]{TRUE}}, \code{\link[base]{NA}}s
are excluded first, otherwise not.}

\item{dim.}{An \code{\link[base]{integer}} \code{\link[base]{vector}} of
length two specifying the dimension of \code{x}, also when not a
\code{\link[base]{matrix}}.}

\item{force_block_processing}{\code{FALSE} (the default) means that a
seed-aware, optimised method is used (if available). This can be overridden
to use the general block-processing strategy by setting this to \code{TRUE}
(typically not advised). The block-processing strategy loads one or more
(depending on \verb{\link[DelayedArray]\{getAutoBlockSize\}()}) columns (\code{colFoo()})
or rows (\code{rowFoo()}) into memory as an ordinary \link[base:array]{base::array}.}

\item{...}{Additional arguments passed to specific methods.}
}
\value{
\code{rowAlls()} (\code{colAlls()}) returns an
\code{\link[base]{logical}} \code{\link[base]{vector}} of length N (K).
Analogously for \code{rowAnys()} (\code{rowAlls()}).
}
\description{
Checks if a value exists / does not exist in each row (column) of a matrix.
}
\details{
These functions takes either a matrix or a vector as input. If a vector,
then argument \code{dim.} must be specified and fulfill \code{prod(dim.) ==
length(x)}.  The result will be identical to the results obtained when
passing \code{matrix(x, nrow = dim.[1L], ncol = dim.[2L])}, but avoids
having to temporarily create/allocate a matrix, if only such is needed
only for these calculations.
}
\section{Logical \code{value}}{


When \code{value} is logical, the result is as if the function is applied
on \code{as.logical(x)}.  More specifically, if \code{x} is numeric, then
all zeros are treated as \code{FALSE}, non-zero values as \code{TRUE},
and all missing values as \code{NA}.




When \code{value} is logical, the result is as if the function is applied
on \code{as.logical(x)}.  More specifically, if \code{x} is numeric, then
all zeros are treated as \code{FALSE}, non-zero values as \code{TRUE},
and all missing values as \code{NA}.




When \code{value} is logical, the result is as if the function is applied
on \code{as.logical(x)}.  More specifically, if \code{x} is numeric, then
all zeros are treated as \code{FALSE}, non-zero values as \code{TRUE},
and all missing values as \code{NA}.




When \code{value} is logical, the result is as if the function is applied
on \code{as.logical(x)}.  More specifically, if \code{x} is numeric, then
all zeros are treated as \code{FALSE}, non-zero values as \code{TRUE},
and all missing values as \code{NA}.

}

\examples{
# A DelayedMatrix with a 'matrix' seed
dm_matrix <- DelayedArray(matrix(c(rep(1L, 5),
                                   as.integer((0:4) ^ 2),
                                   seq(-5L, -1L, 1L)),
                                 ncol = 3))
# A DelayedMatrix with a 'SolidRleArraySeed' seed
dm_Rle <- RleArray(Rle(c(rep(1L, 5),
                         as.integer((0:4) ^ 2),
                         seq(-5L, -1L, 1L))),
                   dim = c(5, 3))

colAlls(dm_matrix, value = 1)
colAnys(dm_matrix, value = 2)
rowAlls(dm_Rle, value = 1)
rowAnys(dm_Rle, value = 2)
}
\seealso{
rowCounts
}
\author{
Peter Hickey

Peter Hickey
}
