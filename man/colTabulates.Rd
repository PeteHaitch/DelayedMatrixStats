% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colTabulates.R, R/rowTabulates.R
\name{colTabulates,DelayedMatrix-method}
\alias{colTabulates,DelayedMatrix-method}
\alias{rowTabulates,DelayedMatrix-method}
\title{Tabulates the values in a matrix by row (column).}
\usage{
\S4method{colTabulates}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  values = NULL,
  force_block_processing = FALSE,
  ...
)

\S4method{rowTabulates}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  values = NULL,
  force_block_processing = FALSE,
  ...
)
}
\arguments{
\item{x}{A NxK \linkS4class{DelayedMatrix}.}

\item{rows}{A \code{\link[base]{vector}} indicating subset of rows
(and/or columns) to operate over. If \code{\link[base]{NULL}}, no subsetting
is done.}

\item{cols}{A \code{\link[base]{vector}} indicating subset of rows
(and/or columns) to operate over. If \code{\link[base]{NULL}}, no subsetting
is done.}

\item{values}{An \code{\link[base]{vector}} of J values of count. If
\code{\link[base]{NULL}}, all (unique) values are counted.}

\item{force_block_processing}{\code{FALSE} (the default) means that a
seed-aware, optimised method is used (if available). This can be overridden
to use the general block-processing strategy by setting this to \code{TRUE}
(typically not advised). The block-processing strategy loads one or more
(depending on \verb{\link[DelayedArray]\{getAutoBlockSize\}()}) columns (\code{colFoo()})
or rows (\code{rowFoo()}) into memory as an ordinary \link[base:array]{base::array}.}

\item{...}{Additional arguments passed to specific methods.}
}
\value{
Returns a NxJ (KxJ) \code{\link[base]{matrix}} where N (K) is the
number of row (column) \code{\link[base]{vector}}s tabulated and J is the
number of values counted.
}
\description{
Tabulates the values in a matrix by row (column).
}
\details{
An alternative to these functions, is to use \code{table(x, row(x))}
and \code{table(x, col(x))}, with the exception that the latter do not
support the \code{\link[base]{raw}} data type.
When there are no missing values in \code{x}, we have that
\code{all(rowTabulates(x) == t(table(x, row(x))))} and
\code{all(colTabulates(x) == t(table(x, col(x))))}.
When there are missing values, we have that
\code{all(rowTabulates(x) == t(table(x, row(x), useNA = "always")[, seq_len(nrow(x))]))} and
\code{all(colTabulates(x) == t(table(x, col(x), useNA = "always")[, seq_len(ncol(x))]))}.
}
\examples{
# A DelayedMatrix with a 'DataFrame' seed
dm_DF <- DelayedArray(S4Vectors::DataFrame(C1 = rep(1L, 5),
                                           C2 = as.integer((0:4) ^ 2),
                                           C3 = seq(-5L, -1L, 1L)))

colTabulates(dm_DF)

rowTabulates(dm_DF)
}
\author{
Peter Hickey
}
