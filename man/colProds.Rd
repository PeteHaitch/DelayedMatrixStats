% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colProds.R, R/rowProds.R
\name{colProds,DelayedMatrix-method}
\alias{colProds,DelayedMatrix-method}
\alias{colProds,SolidRleArraySeed-method}
\alias{rowProds,DelayedMatrix-method}
\title{Calculates the product for each row (column) in a matrix}
\usage{
\S4method{colProds}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  na.rm = FALSE,
  method = c("direct", "expSumLog"),
  force_block_processing = FALSE,
  ...
)

\S4method{colProds}{SolidRleArraySeed}(
  x,
  rows = NULL,
  cols = NULL,
  na.rm = FALSE,
  method = c("direct", "expSumLog"),
  ...
)

\S4method{rowProds}{DelayedMatrix}(
  x,
  rows = NULL,
  cols = NULL,
  na.rm = FALSE,
  method = c("direct", "expSumLog"),
  force_block_processing = FALSE,
  ...
)
}
\arguments{
\item{x}{A NxK \linkS4class{DelayedMatrix}.}

\item{rows}{A \code{\link[base]{vector}} indicating subset of
elements (or rows and/or columns) to operate over. If
\code{\link[base]{NULL}}, no subsetting is done.}

\item{cols}{A \code{\link[base]{vector}} indicating subset of
elements (or rows and/or columns) to operate over. If
\code{\link[base]{NULL}}, no subsetting is done.}

\item{na.rm}{If \code{\link[base:logical]{TRUE}}, missing values are
ignored, otherwise not.}

\item{method}{A \code{\link[base]{character}} string specifying how each
product is calculated.}

\item{force_block_processing}{\code{FALSE} (the default) means that a
seed-aware, optimised method is used (if available). This can be overridden
to use the general block-processing strategy by setting this to \code{TRUE}
(typically not advised). The block-processing strategy loads one or more
(depending on \verb{\link[DelayedArray]\{getAutoBlockSize\}()}) columns (\code{colFoo()})
or rows (\code{rowFoo()}) into memory as an ordinary \link[base:array]{base::array}.}

\item{...}{Additional arguments passed to specific methods.}
}
\value{
Returns a \code{\link[base]{numeric}} \code{\link[base]{vector}} of
length N (K).
}
\description{
Calculates the product for each row (column) in a matrix.
}
\details{
If \code{method = "expSumLog"}, then then \code{\link[matrixStats]{product}}() function is
used, which calculates the produce via the logarithmic transform (treating
negative values specially).  This improves the precision and lowers the risk
for numeric overflow.  If \code{method = "direct"}, the direct product is
calculated via the \code{\link[base]{prod}}() function.
}
\section{Missing values}{


Note, if \code{method = "expSumLog"}, \code{na.rm = FALSE}, and \code{x}
contains missing values (\code{\link[base]{NA}} or
\code{\link[base:is.finite]{NaN}}), then the calculated value is also
missing value.  Note that it depends on platform whether
\code{\link[base:is.finite]{NaN}} or \code{\link[base]{NA}} is returned
when an \code{\link[base:is.finite]{NaN}} exists, cf.
\code{\link[base]{is.nan}}().




Note, if \code{method = "expSumLog"}, \code{na.rm = FALSE}, and \code{x}
contains missing values (\code{\link[base]{NA}} or
\code{\link[base:is.finite]{NaN}}), then the calculated value is also
missing value.  Note that it depends on platform whether
\code{\link[base:is.finite]{NaN}} or \code{\link[base]{NA}} is returned
when an \code{\link[base:is.finite]{NaN}} exists, cf.
\code{\link[base]{is.nan}}().

}

\examples{
# A DelayedMatrix with a 'matrix' seed
dm_matrix <- DelayedArray(matrix(c(rep(1L, 5),
                                   as.integer((0:4) ^ 2),
                                   seq(-5L, -1L, 1L)),
                                 ncol = 3))
# A DelayedMatrix with a 'HDF5ArraySeed' seed
# NOTE: Requires that the HDF5Array package is installed
library(HDF5Array)
dm_HDF5 <- writeHDF5Array(matrix(c(rep(1L, 5),
                                   as.integer((0:4) ^ 2),
                                   seq(-5L, -1L, 1L)),
                                 ncol = 3))

colProds(dm_matrix)

rowProds(dm_matrix)
}
\author{
Peter Hickey
}
